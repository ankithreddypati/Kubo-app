/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/64f1a714fe61576b46f27ca2.glb -o src/components/Avatar.jsx -k -r public
*/
//frontend/src/components/Avatar.jsx

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { useChat } from "../hooks/useChat";

const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.77,
    eyeSquintLeft: 0.44,
    eyeSquintRight: 0.43999999999999967,
    noseSneerLeft: 0.1700000727403596,
    noseSneerRight: 0.14000002836874043,
    mouthPressLeft: 1,
    mouthPressRight: 1,
  },
  Angrysmirk: {
    noseSneerLeft: 1,
    noseSneerRight: 0.3900000000000007,
    mouthLeft: 0.75,
    eyeLookUpLeft: 0.6,
    eyeLookUpRight: 0.6,
    mouthDimpleLeft: 0.41474388868265244,
    mouthRollLower: 0.4,
    mouthSmileLeft: 0.35499733688813073,
    mouthSmileRight: 0.35499733688813073
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    browInnerUp: 0.49,
    eyeWideLeft: 0.4999999999999997,
    eyeWideRight: 0.4999999999999997,
    jawOpen: 0.4,
    mouthFunnel: 0.27
  },
  concerned: {
    browInnerUp: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1
  },
  confused: {
    browDownRight: 0.65,
    browInnerUp: 0.55,
    browOuterUpLeft: 0.65,
    eyeSquintLeft: 1,
    eyeSquintRight: 0.68,
    eyeWideLeft: 1,
    eyeWideRight: 0.68,
    mouthStretchLeft: 0.5,
    mouthRollLower: 1
  },
  curious: {
    browInnerUp: 1,
    browOuterUpLeft: 0.53,
    browOuterUpRight: 0.53,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    eyeWideLeft: 1,
    eyeWideRight: 1,
    eyeLookUpLeft: 0.3,
    eyeLookUpRight: 0.3,
    mouthPressLeft: 0.45,
    mouthPressRight: 0.45,
    mouthSmileLeft: 0.29,
    mouthSmileRight: 0.29
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 0.23,
    jawLeft: 0.23,
    mouthShrugLower: 0.54,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.22999999999999984,
    mouthFunnel: 0.6299999999999992,
    mouthDimpleRight: 1
  },
  crazy: {
    browInnerUp: 0.77,
    jawForward: 0.9999999999999994,
    noseSneerLeft: 0.5700000000000012,
    noseSneerRight: 0.5700000000000001,
    eyeLookDownLeft: 0.26,
    eyeLookDownRight: 0.26,
    eyeLookInLeft: 0.961847957552305,
    eyeLookInRight: 0.961847957552305,
    jawOpen: 0.5700000000000001,
    mouthDimpleLeft: 0.961847957552305,
    mouthDimpleRight: 0.961847957552306,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656913,
    mouthSmileLeft: 0.55,
    mouthSmileRight: 0.55,
    tongueOut: 1
  },
};

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

let setupMode = false;

export function Avatar(props) {
  const { nodes, materials, scene } = useGLTF("/models/6727e21cab0dd7635076a15b.glb");
  const { message, onMessagePlayed, chat } = useChat();
  const [lipsync, setLipsync] = useState();

  useEffect(() => {
    console.log(message);
    if (!message) {
      setAnimation("Idle");
      setFacialExpression("default");
      return;
    }
    setAnimation(message.animation);
    setFacialExpression(message.facialExpression);
    setLipsync(message.lipsync);
    const audio = new Audio("data:audio/mp3;base64," + message.audio);
    audio.play();
    setAudio(audio);
    audio.onended = onMessagePlayed;
  }, [message]);

  const { animations } = useGLTF("/models/animations2.glb");

  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "Idle") ? "Idle" : animations[0].name 
  );

  useEffect(() => {
    if (actions[animation]) {
      const fadeTime = 0.5; // Increased from 0.2 to 0.5 for smoother transitions
      const currentAction = actions[animation];
      
      // Ensure proper weight and reset
      currentAction.reset()
        .setEffectiveWeight(1)
        .setEffectiveTimeScale(1)
        .fadeIn(fadeTime)
        .play();
  
      // Gradually fade out other animations
      Object.values(actions).forEach(action => {
        if (action !== currentAction && action.isRunning()) {
          action.fadeOut(fadeTime);
        }
      });
  
      // Crossfade specifically for idle transition
      if (animation === "Idle") {
        currentAction.crossFadeFrom(mixer.clipAction(animations[0]), 0.5, true);
      }
    }
  
    return () => {
      if (actions[animation]) {
        // Smoother cleanup
        actions[animation].fadeOut(0.5);
      }
    };
  }, [animation, actions, mixer]);

  const lerpMorphTarget = (target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (index === undefined || child.morphTargetInfluences[index] === undefined) {
          return;
        }
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );

        if (!setupMode) {
          try {
            set({
              [target]: value,
            });
          } catch (e) {}
        }
      }
    });
  };

  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] = useState("");
  const [audio, setAudio] = useState();

  useFrame(() => {
    if (!setupMode) {
      // Handle facial expressions (excluding mouth during speech)
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        const mapping = facialExpressions[facialExpression];
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return; // eyes wink/blink are handled separately
        }
        // Skip mouth-related morphs during speech
        if (message && lipsync && audio && 
            (key.toLowerCase().includes('mouth') || 
             key.toLowerCase().includes('viseme'))) {
          return;
        }
        if (mapping && mapping[key]) {
          lerpMorphTarget(key, mapping[key], 0.1);
        } else {
          lerpMorphTarget(key, 0, 0.1);
        }
      });

      // Handle blinking
      lerpMorphTarget("eyeBlinkLeft", blink || winkLeft ? 1 : 0, 0.5);
      lerpMorphTarget("eyeBlinkRight", blink || winkRight ? 1 : 0, 0.5);

      // Handle lip sync with smooth transitions
      if (message && lipsync && audio) {
        const currentAudioTime = audio.currentTime;
        let appliedViseme = false;

        // Find and apply current viseme
        for (let i = 0; i < lipsync.mouthCues.length; i++) {
          const mouthCue = lipsync.mouthCues[i];
          if (currentAudioTime >= mouthCue.start && currentAudioTime <= mouthCue.end) {
            const viseme = corresponding[mouthCue.value];
            if (viseme) {
              appliedViseme = true;
              // Reset other visemes first
              Object.values(corresponding).forEach((v) => {
                if (v !== viseme) {
                  lerpMorphTarget(v, 0, 0.15);
                }
              });
              // Apply current viseme
              lerpMorphTarget(viseme, 1, 0.2);
            }
            break;
          }
        }

        // Reset all visemes if none are active
        if (!appliedViseme) {
          Object.values(corresponding).forEach((viseme) => {
            lerpMorphTarget(viseme, 0, 0.15);
          });
        }
      }
    }
  });

  useControls("FacialExpressions", {
    chat: button(() => chat()),
    winkLeft: button(() => {
      setWinkLeft(true);
      setTimeout(() => setWinkLeft(false), 300);
    }),
    winkRight: button(() => {
      setWinkRight(true);
      setTimeout(() => setWinkRight(false), 300);
    }),
    animation: {
      value: animation,
      options: animations.map((a) => a.name),
      onChange: (value) => setAnimation(value),
    },
    facialExpression: {
      options: Object.keys(facialExpressions),
      onChange: (value) => setFacialExpression(value),
    },
    enableSetupMode: button(() => {
      setupMode = true;
    }),
    disableSetupMode: button(() => {
      setupMode = false;
    }),
    logMorphTargetValues: button(() => {
      const emotionValues = {};
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return;
        }
        const value = nodes.EyeLeft.morphTargetInfluences[
          nodes.EyeLeft.morphTargetDictionary[key]
        ];
        if (value > 0.01) {
          emotionValues[key] = value;
        }
      });
      console.log(JSON.stringify(emotionValues, null, 2));
    }),
  });

  const [, set] = useControls("MorphTarget", () =>
    Object.assign(
      {},
      ...Object.keys(nodes.EyeLeft.morphTargetDictionary).map((key) => {
        return {
          [key]: {
            label: key,
            value: 0,
            min: nodes.EyeLeft.morphTargetInfluences[
              nodes.EyeLeft.morphTargetDictionary[key]
            ],
            max: 1,
            onChange: (val) => {
              if (setupMode) {
                lerpMorphTarget(key, val, 1);
              }
            },
          },
        };
      })
    )
  );

  useEffect(() => {
    let blinkTimeout;
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, THREE.MathUtils.randInt(1000, 5000));
    };
    nextBlink();
    return () => clearTimeout(blinkTimeout);
  }, []);

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes['hair-60'].geometry}
        material={materials.M_Hair_60}
        skeleton={nodes['hair-60'].skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
    </group>
  );
}

useGLTF.preload("/models/6727e21cab0dd7635076a15b.glb");
useGLTF.preload("/models/animations2.glb");

export default Avatar;